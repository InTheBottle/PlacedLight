name: Create Place Light Package

on:
  workflow_dispatch:
  release:
    types: [published]
    tags: 'v[1-9]+.[0-9]+.[0-9]+'


jobs:
  validate_and_publish:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Choco install xmlstarlet
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install xmlstarlet

      # Same as Validate - not sure how to just call Validate
      - name: Validate json
        uses: cardinalby/schema-validator-action@v3
        with:
          schema: https://raw.githubusercontent.com/FlayaN/LightPlacer-VR/refs/heads/json-schema/schema.json
          file: package/**/LightPlacer/**/*.json
            
      - name: Download release archive
        uses: robinraju/release-downloader@v1
        with:
          repository: 'Mutagen-Modding/Spriggit'
          latest: true
          zipBall: true
          fileName: 'SpriggitCLI.zip'
          out-file-path: './downloads'
      
      - name: Extract archive
        run: unzip ./downloads/SpriggitCLI.zip -d ./SpriggitCLI
      
      - name: Run Spriggit main deserialization
        run: ./deserialize.bat
        shell: cmd

      # Extract version from the tag
      - name: Extract version from tag
        id: version_extraction
        run: |
          echo "VERSION_TAG=${env:GITHUB_REF -replace 'refs/tags/v', ''}" >> $env:GITHUB_ENV          

      - name: Get current  FOMOD version
        id: fomod_version
        run: | 
          echo "FOMOD_VERSION=$(xml sel -t -m '//Version' -v . ./dist/fomod/info.xml)" >> $env:GITHUB_ENV

      - name: Show Versions
        run: | 
          echo "${{steps.version_extraction.outputs.version_tag}}"
          echo "${{env.FOMOD_VERSION}}"
           
      - name: Update FOMOD XML with version
        if: ${{ env.FOMOD_VERSION !=  env.VERSION_TAG }}
        run: | 
          echo "${{ env.VERSION_TAG }}"
          xml ed --inplace -u '//Version' -v "${{ env.VERSION_TAG }}" ./dist/fomod/info.xml
          type ./dist/fomod/info.xml
           
      # Archive dist directory
      - name: Archive dist directory
        run: |          
          cd ./dist ; zip -r ../downloads/PlacedLight.zip *

      # Upload artifact
      - name: Upload artifact
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run:
          gh release upload ${{ steps.extract_version.outputs.VERSION }} ./downloads/PlacedLight.zip
